input_boolean:
  occupancy_notifications:
    name: "Occupancy Notifications"
    icon: mdi:account-multiple

  occupancy_override:
    name: "Occupancy Override"
    initial: false
  occupancy_announcements:
    name: "Occupancy Announcements"
    icon: mdi:account-voice

  simeon_in_office:
    initial: false
    name: Simeon in office
    icon: mdi:account-hard-hat-outline

  claire_presense:
    initial: false
  eleanor_presense:
    initial: false
  isabelle_presense:
    initial: false

input_select:
  occupancy_mode:
    name: "Occupancy Mode"
    icon: mdi:home-account
    options:
      - Home
      - Night
      - Away
      - Guest
      - Vacation

group:
  family_presense:
    name: Family Presense
    icon: mdi:home
    entities:
      - binary_sensor.simeon_presense
      - binary_sensor.claire_presense
      - binary_sensor.eleanor_presense
      - binary_sensor.isabelle_presense

#########################################################
#
#            Presense - Family
#
#########################################################
binary_sensor:
  - platform: template
    sensors:
      simeon_presense:
        value_template: >-
          {% if ((states("device_tracker.sp12_2")|lower in ["home", "undefined", "unknown"])
                or (states("device_tracker.sp12_app")|lower in ["home", "undefined", "unknown"])
                or (states("device_tracker.sp12")|lower in ["home", "undefined", "unknown"])
            )
            and  (states("device_tracker.330e_xdrive")|lower in ["home", "undefined", "unknown"]) %}
            true
          {% else %}
            false
          {% endif %}
        friendly_name: "Simeon"
        device_class: presence
        icon_template: >-
          {% if is_state('binary_sensor.simeon_presense','on') %} mdi:home-account
          {% else %} mdi:home-outline
          {% endif %}
      claire_presense:
        friendly_name: "Claire"
        device_class: presence
        value_template: >-
          {% if (states("person.claire")|lower in ["home", "undefined", "unknown"]) %}
            true
          {% else %}
            false
          {% endif %}
        icon_template: >-
          {% if is_state("binary_sensor.claire_presense","on") %} mdi:home-account
          {% else %} mdi:home-outline
          {% endif %}
      eleanor_presense:
        friendly_name: "Eleanor"
        device_class: presence
        value_template: >-
          {% if (states("person.eleanor")|lower in ["home", "undefined", "unknown"]) %}
            true
          {% else %}
            false
          {% endif %}
        icon_template: >-
          {% if is_state("binary_sensor.eleanor_presense","on") %} mdi:home-account
          {% else %} mdi:home-outline
          {% endif %}
      isabelle_presense:
        friendly_name: "Isabelle"
        device_class: presence
        value_template: >-
          {% if (states("person.isabelle")|lower in ["home", "undefined", "unknown"]) %}
            true
          {% else %}
            false
          {% endif %}
        icon_template: >-
          {% if is_state("binary_sensor.isabelle_presense","on") %} mdi:home-account
          {% else %} mdi:home-outline
          {% endif %}

sensor:
  - platform: template
    sensors:
      n_people_home:
        friendly_name: Number of People Home
        value_template: >-
          {{ expand("group.family_presense")|selectattr("state","equalto","on")|list|length +
                (1 if is_state("input_select.occupancy_mode","Guest") else 0) }}
        icon_template: >-
          {% if is_state("sensor.n_people_home", "0") %} mdi:account-off
          {% elif is_state("sensor.n_people_home", "1") %} mdi:account
          {% elif is_state("sensor.n_people_home", "2") %} mdi:account-multiple
          {% elif is_state("sensor.n_people_home", "3") %} mdi:account-group         
          {% else %} mdi:account-plus {% endif %}

automation:
  - id: 205b31f7-3992-4d85-99a4-9c988ace7e36
    alias: Simeon in office
    initial_state: true
    trigger:
      - platform: state
        entity_id: sensor.gosundplug10_power # Office Monitor
      - platform: state
        entity_id: switch.esphome_web_af4cb4_switch
    condition:
      - condition: template # rate limit
        value_template: "{{ ( as_timestamp(now()) - as_timestamp(state_attr('automation.simeon_in_office', 'last_triggered')) |int(0) ) > 180 }}"
    action:
      - choose:
          - conditions:
              condition: or
              conditions:
                - condition: numeric_state
                  entity_id: sensor.gosundplug10_power
                  above: 6
                - condition: state
                  entity_id: switch.esphome_web_af4cb4_switch
                  state: "on"
            sequence:
              - service: input_boolean.turn_on
                entity_id: input_boolean.simeon_in_office
        default:
          - service: input_boolean.turn_off
            entity_id: input_boolean.simeon_in_office

  - id: presence_occupancy_mode_reset
    alias: "[Presence] Occupancy Mode Reset"
    description: "Auto select occupancy mode."
    trigger:
      - platform: state
        entity_id: input_boolean.startup_pending
        to: "off"
        from: "on"
        for: 60 # allow states to register
    action:
      - service: input_select.select_option
        target:
          entity_id: input_select.occupancy_mode
        data:
          option: >
            {% if states("sensor.n_people_home") | int(0) == 0 %}
              {{ 'Vacation' if is_state('input_select.occupancy_mode','Vacation') else 'Away' }}
            {% else %}
              {{ 'Home' }}
            {% endif %}
  - id: presence_someone_leaves_home
    alias: "[Presence] Someone Leaves Home"
    description: "Run leave home script when someone leaves home."
    mode: restart
    max: 5
    trigger:
      - platform: state
        entity_id:
          - binary_sensor.simeon_presense
          - binary_sensor.claire_presense
          - binary_sensor.eleanor_presense
          - binary_sensor.isabelle_presense
        from: "on"
        to: "off"
    action:
      - service: input_select.select_option
        target:
          entity_id: input_select.occupancy_mode
        data:
          option: >-
            {% if states("sensor.n_people_home") | int(0) == 0 %}
              {% if is_state('input_select.occupancy_mode','Vacation') %} Vacation
              {% else %} Away
              {% endif %}
            {% elif states('input_select.occupancy_mode') == 'Night' %} Night
            {% else %} Home
            {% endif %}
  ###############################################################################
  ## Presence - Occupancy Mode
  ###############################################################################
  - id: presence_occupancy_mode
    alias: "[Presence] Occupancy Mode"
    description: "Set occupancy mode options, validate occupancy mode change."
    mode: restart
    variables:
      prev_mode: "{{ trigger.from_state.state }}"
    trigger:
      - platform: state
        entity_id: input_select.occupancy_mode
        to: ~
    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: input_select.occupancy_mode
                state: Home
            sequence:
              - if:
                  - condition: template
                    value_template: >
                      {{ states("sensor.n_people_home") | int(0) == 0 }}
                then:
                  - service: input_boolean.turn_on
                    target:
                      entity_id: input_boolean.occupancy_override
                  - service: input_select.select_option
                    target:
                      entity_id: input_select.occupancy_mode
                    data:
                      option: "{{ prev_mode }}" # should be away/vacation
                  - service: input_boolean.turn_off
                    target:
                      entity_id: input_boolean.occupancy_override
          - conditions:
              - condition: state
                entity_id: input_select.occupancy_mode
                state: Night
            sequence:
              - if:
                  - condition: template
                    value_template: >
                      {{ states("sensor.n_people_home") | int(0) == 0 }}
                then:
                  - service: input_boolean.turn_on
                    target:
                      entity_id: input_boolean.occupancy_override

                  - service: input_select.select_option # back to previous mode
                    target:
                      entity_id: input_select.occupancy_mode
                    data:
                      option: "{{ prev_mode }}" # should be away/vacation

                  - service: input_boolean.turn_off
                    target:
                      entity_id: input_boolean.occupancy_override
                  # - service: homeassistant.turn_off
                  #   target:
                  #     entity_id:
                  #       - script.morning_lights

          # - conditions:
          #     - condition: state
          #       entity_id: input_select.occupancy_mode
          #       state:
          #         - Away
          #         - Vacation
          #   sequence:
          #   - service: homeassistant.turn_off
          #     target:
          #       entity_id:
          #         - script.someone_arrives_home
          #         - script.bedtime

          - conditions:
              - condition: state
                entity_id: input_select.occupancy_mode
                state: Guest
            sequence:
              - if:
                  - condition: template
                    value_template: >
                      {{ states("sensor.n_people_home") | int(0) > 0 }}
                then:
                  - service: input_boolean.turn_on
                    target:
                      entity_id: input_boolean.occupancy_override

                  - service: input_select.select_option # back to previous mode if night/override else home mode
                    target:
                      entity_id: input_select.occupancy_mode
                    data:
                      option: "{{ 'Night' if prev_mode == 'Night' else 'Home' }}"

                  - service: input_boolean.turn_off
                    target:
                      entity_id: input_boolean.occupancy_override

  ###############################################################################
  ## Presence - Occupancy Notification
  ###############################################################################
  - id: presence_occupancy_notification
    alias: "[Presence] Occupancy Notification"
    description: "Send notification when occupancy mode has changed."
    mode: restart
    variables:
      run_delay: 15
      occupancy_changed: >
        {{ is_state('input_boolean.occupancy_announcements','on')
            and now() - states.input_select.occupancy_mode.last_changed
              < timedelta(seconds=run_delay) }}
      n_people_home_changed: >
        {{ is_state('input_boolean.occupancy_announcements','on')
            and now() - states.sensor.n_people_home.last_changed
              < timedelta(seconds=run_delay) }}
    trigger:
      - platform: numeric_state
        id: n_people_home
        entity_id: sensor.n_people_home
        above: -1
      - platform: state
        id: occupancy
        entity_id: input_select.occupancy_mode
        to:
          - Home
          - Guest
          - Night
          - Away
          - Vacation
    condition:
      - condition: template
        value_template: >
          {{ is_state('input_boolean.occupancy_announcements','on')
              and now() - states.input_select.occupancy_mode.last_changed < timedelta(seconds=run_delay) }}
      - condition: template
        alias: "Occupancy override is off if occupancy trigger"
        value_template: >
          {{ is_state('input_boolean.occupancy_override','off') }}
    action:
      - service: script.notify_me
        data:
          message: |-
            ** Presense **
            {%- set npeople = states('sensor.n_people_home') |int(0)  -%}
              The house is now in "{{ states('input_select.occupancy_mode') }}" mode.
            {%- if npeople > 0 -%}
              There are {{ npeople }} at home.
            {%- else -%}
              The house is empty.
            {%- endif %}
            {%- if is_state('binary_sensor.simeon_presense', 'on') -%} Simeon is Home {% endif %}
            {%- if is_state('binary_sensor.claire_presense', 'on') -%} Claire is Home {% endif %}
            {%- if is_state('binary_sensor.eleanor_presense', 'on') -%} Eleanor is Home {% endif %}
            {%- if is_state('binary_sensor.isabelle_presense', 'on') -%} Isabelle is Home {% endif %}

script:
  #########################################################
  #
  #             Turn Off Devices If Left On: No One Home
  #
  #########################################################

  appliances_off:
    sequence:
      # - service: script.aclr_off
      #   data_template:
      #     room: "lr"
      # - condition: template
      #   value_template: "{{ states('switch.sb_humidifier') != 'off' }}"
      # - service: media_player.turn_off
      #   data:
      #     entity_id: media_player.50dx700_series
      - service: script.notify_me
        data_template:
          message: "SHOULD script.appliances_off"
