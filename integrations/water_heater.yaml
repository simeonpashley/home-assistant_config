#  They are activated based on the power consumption of the house
# and the power production of the house so that maximize the
# use of free power from them. The water heater has
# a 1200W resistance which I consider to do the automation
# and the maximum power consumption in my house is 3000W.
#
#  Of course, these values are corrected to limit the continuous
# trigger of the automations.

input_boolean:
  energy_flow_auto_control:
    initial: on
  ev_charge_emulate_switch_state:
    initial: false

input_number:
  divert_on_above_solar_w:
    name: Divert ON - Above Solar
    min: 100
    max: 3200
    mode: box
    unit_of_measurement: "W"
    icon: mdi:flash
  divert_off_above_grid_import:
    name: Divert OFF - Above Grid Import
    min: 100
    max: 3200
    mode: box
    unit_of_measurement: "W"
    icon: mdi:flash

binary_sensor:
  - platform: template
    sensors:
      immersion_switch_buffered:
        value_template: >
          {{ is_state('switch.hot_water_boiler_3kwh_switch_0', 'on')}}
        delay_on:
          minutes: 3
        delay_off:
          minutes: 3
      auth_ev_charge:
        # charged is dumb and cannot be controlled, dictated by EV
        friendly_name: "EV Charge authorized"
        value_template: >
          {{ is_state('binary_sensor.330e_xdrive_charging_status', 'on') }}
      import_above_divert_off:
        value_template: >
          {{ (states('sensor.grid_imported_power_w') | float(9999999)) > (states('input_number.divert_off_above_grid_import') | float(1200)) }}
      wh_production_above_divert_on:
        # enough solar production and above max grid import to mitigate flip-flopping
        value_template: >
          {% set immersion_w = 3000 %}
          {% set solar = states('sensor.lp20_solar_production') | int(0) %}
          {% set divert_on = states('input_number.divert_on_above_solar_w')|int(1200) %}
          {% set divert_off = states('input_number.divert_off_above_grid_import') | float(1200) %}
          {% set load = states('sensor.electric_load')| float(9999999) %}
          {% set solar_unused = solar-load %}
          {% set next_grid = -(solar_unused - immersion_w) %}
          {{ solar > divert_on and next_grid < divert_off }}
      auth_hot_water:
        friendly_name: "hot water production authorized"
        value_template: >
          {{ is_state('binary_sensor.water_hot', 'off')
            and is_state('binary_sensor.wh_production_above_divert_on', 'on')
          }}
      water_hot:
        friendly_name: "water is hot above temp. threshold"
        value_template: "{{ 'off' }}"
        # value_template: "{{ states('luxtronik.temperature_warm_water_actual') | float > 48 }}"
        device_class: heat

sensor:
  - platform: template
    sensors:
      dynamic_priority_consumer:
        friendly_name: "waiting for activation:"
        value_template: >
          {% if is_state('binary_sensor.auth_ev_charge', 'on') %}
            ev charge
          {% elif is_state('binary_sensor.auth_hot_water', 'on') %}
            hot water
          {%else%}
            no consumer authorized
          {% endif %}
      dynamic_shutdown_consumer:
        friendly_name: "ready for shutdown:"
        value_template: >
          {% if is_state('switch.hot_water_boiler_3kwh_switch_0', 'on') %}
              hot water
          {% else %}
            _no_consumer_activated_
          {% endif %}

automation:
  ###       START & CHANGE       ###
  ##################################
  - alias: "(energy control) dynamically authorize energy consumers"
    id: b583ebe9-d8c8-4018-afb0-2be087a578c7
    initial_state: true
    trigger:
      - platform: state
        entity_id: binary_sensor.immersion_switch_buffered
        to: "off"
      - platform: state
        entity_id: binary_sensor.auth_hot_water
        to: "on"
      - platform: state
        entity_id: binary_sensor.auth_ev_charge
        to: "on"
    condition:
      - condition: state
        entity_id: input_boolean.energy_flow_auto_control
        state: "on"
      - condition: state
        entity_id: binary_sensor.import_above_divert_off
        state: "off"
      - condition: template
        value_template: "{{ not is_state('sensor.dynamic_priority_consumer', 'no consumer authorized') }}"
    action:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ not is_state('sensor.dynamic_priority_consumer', 'hot water') }}"
              - condition: state
                entity_id: sensor.dynamic_priority_consumer
                state: "ev charge"
            sequence:
              - service: switch.turn_on
                entity_id: switch.ev_charging_authorization
          - conditions:
              - condition: state
                entity_id: binary_sensor.immersion_switch_buffered # must be off for 1min before proceeding
                state: "off"
              - condition: state
                entity_id: sensor.dynamic_priority_consumer
                state: "hot water"
              - condition: state
                entity_id: binary_sensor.auth_hot_water
                state: "on"
            sequence:
              - service: switch.turn_on
                entity_id: switch.hot_water_boiler_3kwh_switch_0

  ###############################
  ###         STOP Orders     ###
  ###############################
  - alias: "(energy control) turn off immersion when import high"
    id: 87fbc2e9-5c8b-4ba3-809e-81a5d7e74df9
    initial_state: true
    trigger:
      - platform: state
        entity_id: binary_sensor.immersion_switch_buffered
      - platform: state
        entity_id: binary_sensor.import_above_divert_off
        for:
          minutes: 1
    condition:
      - condition: state
        entity_id: binary_sensor.immersion_switch_buffered # must be off for 1min before proceeding
        state: "on"
      - condition: state
        entity_id: binary_sensor.import_above_divert_off
        state: "on"
      - condition: state
        entity_id: input_boolean.energy_flow_auto_control
        state: "on"
      - condition: state
        entity_id: switch.hot_water_boiler_3kwh_switch_0
        state: "on"
    action:
      - service: switch.turn_off
        entity_id: switch.hot_water_boiler_3kwh_switch_0
  ###############################
  # NOTIFICATIONS
  ###############################

  - alias: "(energy control) notify virtual water switch change"
    id: 1cc35327-c490-4f30-8a70-fa5b0514c731
    initial_state: true
    trigger:
      - platform: state
        entity_id: switch.hot_water_boiler_3kwh_switch_0
    condition: []
    action:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ is_state('switch.hot_water_boiler_3kwh_switch_0', 'on') }}"
            sequence:
              - service: logbook.log
                data:
                  name: "Immersion:"
                  message: turned ON
              - service: script.notify_me
                data:
                  message: "Immersion ON"
          - conditions:
              - condition: template
                value_template: "{{ is_state('switch.hot_water_boiler_3kwh_switch_0', 'off') }}"
            sequence:
              - service: logbook.log
                data:
                  name: "Immersion:"
                  message: turned OFF
              - service: script.notify_me
                data:
                  message: "Immersion OFF"

##########################
###      Switches      ###
##########################

switch: # Shelley 1PM switch manages immersion heating coil for hot water
  - platform: template
    switches:
      ev_charging_authorization:
        friendly_name: "ev charge emulation switch"
        value_template: "{{ is_state('input_boolean.ev_charge_emulate_switch_state', 'on') }}"
        turn_on:
          - service: input_boolean.turn_on
            data:
              entity_id: input_boolean.ev_charge_emulate_switch_state
        turn_off:
          - service: input_boolean.turn_off
            data:
              entity_id: input_boolean.ev_charge_emulate_switch_state
